
import javax.swing.JOptionPane;

public class Main {

    public static void main(String[] args) {

        // ===== Crear √°rbol e insertar datos de prueba =====
        ArbolN arbol = new ArbolN();
        datosDummies(arbol);

        // ===== Men√∫ principal =====
        boolean ejecutarMenu = true;
        while (ejecutarMenu) {

            //Mostrar arbol (temporal)///////////////////////////////
            arbol.mostrarArbol(arbol.getRaiz(), 0);

            String opcion;
            opcion = JOptionPane.showInputDialog(
                    null,
                    """
                                    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
                                             üå≥ MEN√ö PRINCIPAL üå≥         
                                    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
                                    ‚ïë 1. üë• Gesti√≥n de Personas            
                                    ‚ïë 2. üë®‚Äç Consultar Relaciones         
                                    ‚ïë 3. üèó Consultar Estructura           
                                    ‚ïë 4. üóëEliminaci√≥n de Niveles         
                                    ‚ïë 5. üö™ Salir                          
                                    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                                                         üëâ Selecciona una opci√≥n:
                                    """,
                    "üåø Sistema de √Årbol Geneal√≥gico üåø",
                    JOptionPane.QUESTION_MESSAGE
            );

            if (opcion == null) {
                ejecutarMenu = false;
            } else {
                switch (opcion) {
                    case "1" ->
                        menuGestionPersonas(arbol);
                    case "2" ->
                        menuRelacionesFamiliares(arbol);
                    case "3" ->
                        menuEstructura(arbol);
                    case "4" ->
                        menuEliminacionNiveles(arbol);
                    case "5" -> {
                        ejecutarMenu = false;
                        JOptionPane.showMessageDialog(null, "üëã Saliendo del programa...");
                    }
                    default ->
                        JOptionPane.showMessageDialog(null, "‚ö† Opci√≥n no v√°lida.");
                }
            }
        }
    }

    /* ==========================================================
       1) SUBMEN√ö: GESTI√ìN DE PERSONAS
    ========================================================== */
    private static void menuGestionPersonas(ArbolN arbol) {
        boolean back = false;
        while (!back) {
            var opcion = JOptionPane.showInputDialog(
                    null,
                    """
                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                ‚ïë       üë• Gesti√≥n de Personas        
                ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                ‚ïë 1. ‚ûï Registrar Persona              
                ‚ïë 2. ‚ùå Eliminar Persona               
                ‚ïë 3. ‚ôª  Actualizar Persona             
                ‚ïë 4. üîô Volver al Men√∫ Principal       
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                
                üëâ Selecciona una opci√≥n:
                """,
                    "üë• Gesti√≥n de Personas",
                    JOptionPane.QUESTION_MESSAGE
            );

            if (opcion == null || opcion.equals("4")) {
                back = true;
            } else {
                switch (opcion) {
                    case "1" -> {
                        // Pedimos los datos
                        String cedulaStr = JOptionPane.showInputDialog("Ingrese la c√©dula:");
                        String nombre = JOptionPane.showInputDialog("Ingrese el nombre:");
                        String cedulaPadreStr = JOptionPane.showInputDialog("Ingrese la c√©dula del padre:");
                        String edadStr = JOptionPane.showInputDialog("Ingrese la edad:");

                        // Validamos y convertimos a n√∫meros donde corresponda
                        try {
                            int cedula = Integer.parseInt(cedulaStr);
                            int cedulaPadre = Integer.parseInt(cedulaPadreStr);
                            int edad = Integer.parseInt(edadStr);

                            if (arbol.estaVacio()) {
                                arbol.insertar(nombre, cedula, edad);
                            } else {
                                arbol.insertar(arbol.getRaiz(), nombre, cedula, edad, cedulaPadre);
                            }

                            // Mostramos un resumen de lo ingresado
                            JOptionPane.showMessageDialog(null,
                                    "‚úÖ Datos registrados:\n"
                                    + "C√©dula: " + cedula + "\n"
                                    + "Nombre: " + nombre + "\n"
                                    + "C√©dula del padre: " + cedulaPadre + "\n"
                                    + "Edad: " + edad
                            );

                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "‚ö†Ô∏è Error: Debe ingresar valores num√©ricos v√°lidos para c√©dula y edad.");
                        }
                    }
                    case "2" -> {
                        String cedulaStr = JOptionPane.showInputDialog(null, "Ingrese la c√©dula de la persona a eliminar");
                        if (cedulaStr != null) {
                            try {
                                int cedulaBuscada = Integer.parseInt(cedulaStr);
                                arbol.eliminarNodo(arbol.getRaiz(), cedulaBuscada);
                            } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "‚ö† La c√©dula debe ser un n√∫mero v√°lido.");
                            }
                        }
                    }
                    case "3" -> {
                        String cedulaStr = JOptionPane.showInputDialog(null, "Ingrese la c√©dula de la persona a actualizar");
                        if (cedulaStr != null) {
                            try {
                                int cedulaBuscada = Integer.parseInt(cedulaStr);

                                // Pedir los nuevos datos
                                String nuevaCedulaStr = JOptionPane.showInputDialog(null, "Ingrese la nueva c√©dula:");
                                String nuevoNombre = JOptionPane.showInputDialog(null, "Ingrese el nuevo nombre:");
                                String nuevaEdadStr = JOptionPane.showInputDialog(null, "Ingrese la nueva edad:");

                                // Convertir a n√∫meros
                                int nuevaCedula = Integer.parseInt(nuevaCedulaStr);
                                int nuevaEdad = Integer.parseInt(nuevaEdadStr);

                                // Llamada al m√©todo del √°rbol
                                arbol.actualizarNodo(arbol.getRaiz(), cedulaBuscada, nuevaCedula, nuevoNombre, nuevaEdad);

                                JOptionPane.showMessageDialog(null, "‚úÖ Datos actualizados correctamente.");

                            } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "‚ö† Error: debe ingresar valores num√©ricos v√°lidos para c√©dula y edad.");
                            }
                        }

                    }
                    default ->
                        JOptionPane.showMessageDialog(null, "‚ö† Opci√≥n no v√°lida.");
                }
            }
        }
    }

    /* ==========================================================
       2) SUBMEN√ö: RELACIONES FAMILIARES
    ========================================================== */
    private static void menuRelacionesFamiliares(ArbolN arbol) {
        boolean back = false;
        while (!back) {
            String opcion = JOptionPane.showInputDialog(
                    null,
                    """
                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                ‚ïë   üë®‚Äçüë©‚Äçüëß Consultar Relaciones Familiares  
                ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                ‚ïë 1. üë®‚Äçüë© Padres                       
                ‚ïë 2. üë∂ Hijos                        
                ‚ïë 3. ü§ù Hermanos                      
                ‚ïë 4. üßì Ancestros                     
                ‚ïë 5. üå± Descendientes                 
                ‚ïë 6. üîô Volver al Men√∫ Principal       
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                
                üëâ Selecciona una opci√≥n:
                """,
                    "üîç Consultar Relaciones Familiares",
                    JOptionPane.QUESTION_MESSAGE
            );

            if (opcion == null || opcion.equals("6")) {
                back = true;
            } else {
                switch (opcion) {
                    case "1" -> {
                        String cedulaStr = JOptionPane.showInputDialog(null, "Ingrese la c√©dula del hijo:");
                        if (cedulaStr != null) {
                            try {
                                int cedulaHijo = Integer.parseInt(cedulaStr);
                                arbol.mostrarPadre(arbol.getRaiz(), cedulaHijo);
                            } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "‚ö† La c√©dula debe ser un n√∫mero v√°lido.");
                            }
                        }
                    }
                    case "2" -> {
                        String cedulaStr = JOptionPane.showInputDialog(null, "Ingrese la c√©dula del padre:");
                        if (cedulaStr != null) {
                            try {
                                int cedulaPadre = Integer.parseInt(cedulaStr);
                                arbol.mostrarHijos(arbol.getRaiz(), cedulaPadre);
                            } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "‚ö† La c√©dula debe ser un n√∫mero v√°lido.");
                            }
                        }
                    }
                    case "3" -> {
                        String cedulaStr = JOptionPane.showInputDialog(null, "Ingrese la c√©dula del hermano:");
                        if (cedulaStr != null) {
                            try {
                                int cedulaHermano = Integer.parseInt(cedulaStr);
                                arbol.mostrarHermanos(arbol.getRaiz(), cedulaHermano);
                            } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "‚ö† La c√©dula debe ser un n√∫mero v√°lido.");
                            }
                        }
                    }
                    case "4" -> {
                        String cedulaStr = JOptionPane.showInputDialog(null, "Ingrese la c√©dula del pariente decendiente:");
                        if (cedulaStr != null) {
                            try {
                                int cedulaPariente = Integer.parseInt(cedulaStr);
                                arbol.mostrarAncestros(cedulaPariente);
                            } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "‚ö† La c√©dula debe ser un n√∫mero v√°lido.");
                            }
                        }
                    }
                    case "5" -> {
                        String cedulaStr = JOptionPane.showInputDialog(null, "Ingrese la c√©dula del pariente ancestro:");
                        if (cedulaStr != null) {
                            try {
                                int cedulaPariente = Integer.parseInt(cedulaStr);
                                arbol.mostrarDescendientes(arbol.getRaiz(), cedulaPariente);
                            } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "‚ö† La c√©dula debe ser un n√∫mero v√°lido.");
                            }
                        }
                    }
                    default ->
                        JOptionPane.showMessageDialog(null, "‚ö† Opci√≥n no v√°lida.");
                }
            }
        }
    }

    /* ==========================================================
       3) SUBMEN√ö: CONSULTAR ESTRUCTURA
    ========================================================== */
    private static void menuEstructura(ArbolN arbol) {
        boolean back = false;
        while (!back) {
            String opcion = JOptionPane.showInputDialog(
                    null,
                    """
                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                ‚ïë       üèó  Estructura del √Årbol       
                ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                ‚ïë 1. üîù Nodo con mayor grado           
                ‚ïë 2. üìè Nodo con mayor nivel           
                ‚ïë 3. üå≥ Altura del √°rbol               
                ‚ïë 4. üéØ Nivel de un registro           
                ‚ïë 5. üìÇ Registros por nivel            
                ‚ïë 6. üîô Volver al Men√∫ Principal       
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                
                üëâ Selecciona una opci√≥n:
                """,
                    "üèó Consultar Estructura",
                    JOptionPane.QUESTION_MESSAGE
            );

            if (opcion == null || opcion.equals("6")) {
                back = true;
            } else {
                switch (opcion) {
                    case "1" ->
                        JOptionPane.showMessageDialog(null, "üìå Llamar m√©todo: nodoMayorGrado()");
                    case "2" ->
                        JOptionPane.showMessageDialog(null, "üìå Llamar m√©todo: nodoMayorNivel()");
                    case "3" ->
                        JOptionPane.showMessageDialog(null, "üìå Llamar m√©todo: alturaArbol()");
                    case "4" ->
                        JOptionPane.showMessageDialog(null, "üìå Llamar m√©todo: nivelRegistro()");
                    case "5" ->
                        JOptionPane.showMessageDialog(null, "üìå Llamar m√©todo: registrosPorNivel()");
                    default ->
                        JOptionPane.showMessageDialog(null, "‚ö† Opci√≥n no v√°lida.");
                }
            }
        }
    }

    /* ==========================================================
       4) SUBMEN√ö: ELIMINACI√ìN DE NIVELES
    ========================================================== */
    private static void menuEliminacionNiveles(ArbolN arbol) {
        boolean back = false;
        while (!back) {
            String opcion = JOptionPane.showInputDialog(
                    null,
                    """
                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                ‚ïë       üóë  Eliminaci√≥n de Niveles      
                ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                ‚ïë 1. ‚ùå Eliminar todos los nodos       
                ‚ïë    de un nivel espec√≠fico            
                ‚ïë 2. üîô Volver al Men√∫ Principal       
                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                
                üëâ Selecciona una opci√≥n:
                """,
                    "üóë Eliminaci√≥n de Niveles",
                    JOptionPane.WARNING_MESSAGE
            );

            if (opcion == null || opcion.equals("2")) {
                back = true;
            } else {
                switch (opcion) {
                    case "1" -> {
                        String nivelEliminar = JOptionPane.showInputDialog(null, "Ingrese el nivel a eliminar:");
                        if (nivelEliminar != null) {
                            try {
                                int nivel = Integer.parseInt(nivelEliminar);
                                arbol.eliminarNivel(arbol.getRaiz(), nivel);
                            } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(null, "‚ö† La c√©dula debe ser un n√∫mero v√°lido.");
                            }
                        }
                    }
                    default ->
                        JOptionPane.showMessageDialog(null, "‚ö† Opci√≥n no v√°lida.");
                }
            }
        }
    }

    /* ==========================================================
       DATOS DE PRUEBA
    ========================================================== */
    public static void datosDummies(ArbolN arbol) {
        arbol.insertar("Pedro", 100, 89);
        arbol.insertar(arbol.getRaiz(), "Jose", 300, 65, 100);
        arbol.insertar(arbol.getRaiz(), "Ana", 150, 71, 100);
        arbol.insertar(arbol.getRaiz(), "Maria", 200, 67, 100);
        arbol.insertar(arbol.getRaiz(), "Simon", 250, 69, 100);
        arbol.insertar(arbol.getRaiz(), "Rosa", 400, 41, 300);
        arbol.insertar(arbol.getRaiz(), "Sara", 550, 47, 300);
        arbol.insertar(arbol.getRaiz(), "Hugo", 350, 47, 200);
        arbol.insertar(arbol.getRaiz(), "Paco", 600, 47, 200);
        arbol.insertar(arbol.getRaiz(), "Laura", 450, 47, 200);
        arbol.insertar(arbol.getRaiz(), "Luis", 750, 47, 200);
        arbol.insertar(arbol.getRaiz(), "Nora", 700, 47, 350);
        arbol.insertar(arbol.getRaiz(), "Lola", 500, 47, 350);
        arbol.insertar(arbol.getRaiz(), "Pablo", 650, 47, 350);
    }
}

//arbol.mostrarArbol(arbol.getRaiz(),0);
//arbol.mostrarHijos(arbol.getRaiz(),300);
//arbol.mostrarHijos(arbol.getRaiz(),100);
//arbol.mostrarHijos(arbol.getRaiz(),650);
//arbol.mostrarHermanos(arbol.getRaiz(),400);
//arbol.mostrarHermanos(arbol.getRaiz(),600);
//arbol.mostrarHijos(arbol.getRaiz(),10000);
//arbol.mostrarPadre(arbol.getRaiz(),100);
//arbol.mostrarAltura(arbol.getRaiz());
//arbol.mostrarArbol(arbol.getRaiz(),0);
//arbol.actualizarNodo(arbol.getRaiz(), 300, 300, "Camilo", 99);
//arbol.mostrarArbol(arbol.getRaiz(),0);
//arbol.mostrarNodoConMayorNivel(arbol.getRaiz());
//arbol.mostrarDescendientes(arbol.getRaiz(), 200);
//arbol.mostrarAncestros(500);
//arbol.mostrarNivelDeRegistro(arbol.getRaiz(), 600);
//arbol.mostrarRegistrosDeNivel(arbol.getRaiz(), 700);
//arbol.eliminarNodo(arbol.getRaiz(), 350);
//arbol.eliminarNivel(arbol.getRaiz(),3);
//arbol.mostrarArbol(arbol.getRaiz(), 0);
